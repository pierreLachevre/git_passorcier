Etape 1:

git init presentation_codeurenseine

cd presentation_codeurenseine

git remote add origin git@github.com:pierreLachevre/presentation_codeurenseine.git

vi test.txt

git add .

git config --global user.email "pierre.lachevre@gmail.com"

git config -- global user.name "pierreLachevre"

git commit -m "Création d'un fichier texte"

git push origin master

git branch "branche_test"

git branch "branche_test2"

git checkout branch_test

vi test.txt

changement du fichier texte

git status

git commit -am "Modification du fichier texte 1"

git push origin branche_test

git merge branche_test master

git checkout branche_test2

vi test.txt

modification

git commit -am "Modification du fichier texte 2"

git push origin branche_test2

git fetch

git merge master origin master

git merge branche_test2 master


--------------------------------------
Exo 1


git branch test

git checkout test

vi test.txt

maj fichier texte

git commit -am "Mettre un bon message de commit"

git push

Corriger en faisant :

git push --set-upstream origin test ==> git push possible

ou git push origin test


-----------------------
Exo2

git checkout -b test2

vi test.txt
maj fichier

vi test2.txt
maj fichier

vi test3.txt
maj fichier

git commit -am "Maj des fichiers"

git push origin test2

Corriger en faisant un git add et montrer en même temps le git add -p

-------------------------------------------
Exo3

git checkout -b test4

git push origin test4

vi test.txt
maj fichier

Aller sur github et faire une modification

git commit -am "Maj des fichiers"

git push origin test4

Corriger en faisant un git fetch puis un git merge ou git rebase ou encore un git pull

------------------------------------------------------
Exo4

git checkout -b test5

git push origin test5

vi test.txt
maj fichier

git commit -am "Maj des fichiers"

faire un git checkout master

faire un git checkout -b test6

vi test.txt
maj fichier

git commit -am "super maj"
git push -f origin test6:test5

git checkout test5



Corriger en faisant un git reflog show remotes/origin/test5
puis un git reset --hard commit précédent
puis git push -f

ou alors si git pull pas fait juste faire un git push -f


-------------------------------------------------
Discover part 2

git reset:

vi fichier ajout modif

vi ajout fichier

git add .

git commit -m "blabla"

 
git reset --soft num_commit
 
git status
==> fichiers prêt à être commité

git commit -m

git reset num_commit
git status
==> fichier retiré de l'index

git commit -m

git reset --hard num_commit
git status
==> plus de fichiers


git cherry-pick:

checkout -b branche

vi test.txt

git commit -am "modification"

git log

git checkout master

git cherry-pick id_commit

git status


git rebase: 

git checkout -b branche

vi test.txt

git commit 


git checkout master

vi test.txt

git commit 
git push

git checkout branche

git rebase origin/master

git log


git bisect:

faire plusieurs commit en utilisant test.sh et le fichier (préparer une branche)

10 commit

git bisect start

git bisect bad (current version bad)

git bisect good id_commit (tel commit est ok)

taper à chaque fois ./test.sh nom_fichier
puis git commit good ou bad

puis git diff avec dernier bon commit ==> différence de fichier

et enfin git blame nom_fichier

on finit par git bisect reset pour arrêter


git stash:

vi test.txt modif

git stash

git stash list

git stash pop


git stash push -m message

git stash list

git stash apply stash@{0}

git stash list

git reset --hard

git stash pop stash@{0}

git stash clear ==> plus rien








-----------------------------------------------------
Exo5 = hard part

Faire un git checkout -b test7
Faire une modification du fichier en ajoutant une nouvelle ligne "Ajout test7"
git commit -am "Ajout test7"

git checkout master
Faire une modification du fichier en changeant la première ligne "Modification master"
git commit -am "Ajout master"
git push origin master

git checkout test7

git log

git rebase origin/master
git push origin test7

ça marche pas !!!

git log ==> bah oui le commit de master apparait avant mon commit ==> historique réécrit

faire un git push -f ==> MAIS AVANT PREVENIR LA TERRE ENTIERE SURTOUT SI C'EST UNE BRANCHE COMMUNE

----------------------------------------------------------
Exo6 = hard part

cd git_passorcier

git checkout feature/demo_rebase

git log

git rebase origin develop

git log

git push origin feature/demo_rebase

git pull origin feature/demo_rebase

git log

==> WTF?????

--------------------------------------
Exo7

git checkout -b forxtrot_dev

git push origin foxtrot_dev

gir branch foxtrot_branche

vi test.txt ==> changement

git commit -am "dev foxtrot"

git log

git log --first-parent

git checkout foxtrot_branche

vi test.txt ==> changement

git commit -am "branche foxtrot"

git merge foxtrot_dev

git checkout foxtrot_dev

git merge foxtrot_branche

git log

git log --first-parent

git revert commit -m 1


reparation 

git rebase foxtrot_dev

git reflog

git reset --hard reflog


git checkout foxtrot_dev

git merge commit foxtrot_branche

git push -f origin foxtrot_dev

ou


git checkout origin/foxtrot_dev

git merge commit foxtrot_dev

git push origin +HEAD:foxtrot_branche

-----------------------------
Exo8

git branch -M feature/tt ????


------------------------

git clean -f


git config --global mergetool.keepBackup false


git mergetool

git log --graph --pretty=oneline --abbrev-commit --all


ADOG:
git log --all --decorate --oneline --graph



git stash push -m "my stash"

git stash list

git stash apply 1

git stash pop 1


git push origin --delete feature/tt




